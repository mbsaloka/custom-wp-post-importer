<?php
/*
Plugin Name: Custom XML Product Importer
Description: Import produk dari XML dan clone post template (Elementor) menjadi product posts.
Version: 1.0
Author: Generated by ChatGPT
*/

if (!defined('ABSPATH')) exit;

// Admin menu
add_action('admin_menu', function() {
    add_menu_page(
        'Products Importer',
        'Products Importer',
        'manage_options',
        'custom-xml-product-importer',
        'cip_render_admin_page',
        'dashicons-upload',
        60
    );
});

// Admin page HTML + form
function cip_render_admin_page() {
  if (!current_user_can('manage_options')) {
      wp_die('Access denied');
  }

  $message = '';
  $xml_path = '';
  $template_slug = '';

  // Jika tombol import ditekan
  if (isset($_POST['cip_import']) && isset($_POST['cip_import_nonce']) && wp_verify_nonce($_POST['cip_import_nonce'], 'cip_import_action')) {

      if (!empty($_FILES['cip_xml_file']['name'])) {
          $uploaded = cip_handle_file_upload($_FILES['cip_xml_file']);
          if ($uploaded['success']) {
              $xml_path = $uploaded['file'];
          } else {
              $message = '<div class="notice notice-error"><p>' . esc_html($uploaded['error']) . '</p></div>';
          }
      } else {
          $xml_path = isset($_POST['cip_xml_path']) ? sanitize_text_field($_POST['cip_xml_path']) : '';
          if (empty($xml_path)) {
              $xml_path = plugin_dir_path(__FILE__) . 'produklist.xml';
          }
      }

      $template_slug = isset($_POST['cip_template_slug']) ? sanitize_text_field($_POST['cip_template_slug']) : '';

      if (!empty($xml_path) && !empty($template_slug)) {
          $result = cip_process_import($xml_path, $template_slug);
          if ($result['success']) {
              $message = '<div class="notice notice-success"><p>' . esc_html($result['message']) . '</p></div>';
          } else {
              $message = '<div class="notice notice-error"><p>' . esc_html($result['message']) . '</p></div>';
          }
      } else {
          $message = '<div class="notice notice-warning"><p>Silakan pilih file XML dan masukkan Template Slug.</p></div>';
      }
  }
  ?>
  <div class="wrap">
      <h1>Custom XML Product Importer</h1>
      <?php if (!empty($message)) echo $message; ?>

      <form method="post" enctype="multipart/form-data" style="max-width:900px;">
          <?php wp_nonce_field('cip_import_action', 'cip_import_nonce'); ?>

          <table class="form-table">
              <tr>
                  <th scope="row"><label for="cip_xml_file">Upload XML (opsional)</label></th>
                  <td>
                      <input type="file" name="cip_xml_file" id="cip_xml_file" accept=".xml" />
                      <p class="description">Atau isi path server di bawah jika file sudah diupload ke server.</p>
                  </td>
              </tr>

              <tr>
                  <th scope="row"><label for="cip_xml_path">Path XML di server (opsional)</label></th>
                  <td>
                      <input type="text" name="cip_xml_path" id="cip_xml_path" style="width:100%" placeholder="/home/username/public_html/wp-content/uploads/produk.xml" />
                  </td>
              </tr>

              <tr>
                  <th scope="row"><label for="cip_template_slug">Template Post Slug</label></th>
                  <td>
                      <input type="text" name="cip_template_slug" id="cip_template_slug" style="width:100%" placeholder="product-template" required />
                  </td>
              </tr>
          </table>

          <p class="submit">
              <input type="submit" name="cip_import" id="cip_import" class="button button-primary" value="Import XML Products" />
              <input type="submit" name="cip_preview" id="cip_preview" class="button" value="Preview Template" />
              <input type="submit" name="cip_preview_xml" id="cip_preview_xml" class="button" value="Preview XML" />
          </p>
      </form>

      <?php
      // === PREVIEW TEMPLATE ===
      if (isset($_POST['cip_preview']) && !empty($_POST['cip_template_slug'])) {
          $template_slug = sanitize_text_field($_POST['cip_template_slug']);
          $template = get_page_by_path($template_slug, OBJECT, 'post');

          if ($template) {
              echo '<h2>Preview Template: ' . esc_html($template->post_title) . '</h2>';
              echo '<p><em>Slug:</em> ' . esc_html($template_slug) . ' | <em>ID:</em> ' . esc_html($template->ID) . '</p>';

              $elementor_data = get_post_meta($template->ID, '_elementor_data', true);

              if (!empty($elementor_data)) {
                  echo '<details style="margin:1em 0;"><summary><strong>Lihat Struktur Elementor (JSON)</strong></summary>';
                  echo '<pre style="max-height:400px;overflow:auto;background:#f8f8f8;padding:10px;border:1px solid #ddd;">' . esc_html(substr($elementor_data, 0, 5000)) . '</pre>';
                  echo '</details>';
              } else {
                  echo '<p><span style="color:red;">Tidak ada data _elementor_data ditemukan.</span></p>';
                  echo '<p><em>Konten template biasa:</em></p>';
                  echo '<div style="background:#fff;padding:10px;border:1px solid #ccc;">' . $template->post_content . '</div>';
              }
          } else {
              echo '<p style="color:red;">Template dengan slug <code>' . esc_html($template_slug) . '</code> tidak ditemukan.</p>';
          }
      }

      // === PREVIEW XML ===
      if (isset($_POST['cip_preview_xml'])) {
        $xml_path = '';

        // Jika user upload file baru
        if (!empty($_FILES['cip_xml_file']['name'])) {
            $uploaded = cip_handle_file_upload($_FILES['cip_xml_file']);
            if ($uploaded['success']) {
                $xml_path = $uploaded['file'];
            } else {
                echo '<div class="notice notice-error"><p>' . esc_html($uploaded['error']) . '</p></div>';
                return;
            }
        } else {
            // Jika user masukkan path manual
            $xml_path = isset($_POST['cip_xml_path']) ? sanitize_text_field($_POST['cip_xml_path']) : '';
            if (empty($xml_path)) {
                $xml_path = plugin_dir_path(__FILE__) . 'produklist.xml';
            }
        }

        cip_preview_xml($xml_path);
    }
      ?>
  </div>
  <?php
}

// Handle file upload (move to plugin dir)
function cip_handle_file_upload($file) {
    if ($file['error'] !== UPLOAD_ERR_OK) {
        return ['success' => false, 'error' => 'Upload error code: ' . $file['error']];
    }

    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);
    if (strtolower($ext) !== 'xml') {
        return ['success' => false, 'error' => 'File harus .xml'];
    }

    $upload_dir = plugin_dir_path(__FILE__);
    $target = $upload_dir . basename($file['name']);

    if (!move_uploaded_file($file['tmp_name'], $target)) {
        return ['success' => false, 'error' => 'Gagal memindahkan file ke plugin folder. Pastikan permission folder writable.'];
    }

    return ['success' => true, 'file' => $target];
}

// Core import processor
function cip_process_import($xml_path, $template_slug) {
    if (!file_exists($xml_path)) {
        return ['success' => false, 'message' => 'File XML tidak ditemukan di path: ' . $xml_path];
    }

    $template = get_page_by_path($template_slug, OBJECT, 'post');
    if (!$template) {
        return ['success' => false, 'message' => 'Template post (slug: ' . $template_slug . ') tidak ditemukan.'];
    }

    $elementor_json = get_post_meta($template->ID, '_elementor_data', true)
        ?: get_post_meta($template->ID, '_elementor_sync_data', true);

    if (empty($elementor_json)) {
        return ['success' => false, 'message' => 'Template tidak berisi _elementor_data atau _elementor_sync_data.'];
    }

    $elementor_data = json_decode($elementor_json, true);
    if ($elementor_data === null) {
        return ['success' => false, 'message' => 'Gagal decode JSON Elementor.'];
    }

    libxml_use_internal_errors(true);
    $xml = simplexml_load_file($xml_path);
    if ($xml === false) {
        $msg = "XML parse error: ";
        foreach (libxml_get_errors() as $e) $msg .= trim($e->message) . "; ";
        return ['success' => false, 'message' => $msg];
    }

    $count = 0;
    $duplicate_count = 0;

    foreach ($xml->produk as $produk) {
        $title = trim((string)$produk->nama);
        if (empty($title)) continue;

        // Cegah duplikat
        $existing = get_page_by_title($title, OBJECT, 'post');
        if ($existing && get_post_status($existing->ID) !== 'trash') {
            $duplicate_count++;
            continue;
        }

        // Buat post dulu
        $post_id = wp_insert_post([
            'post_title'    => $title,
            'post_status'   => 'publish',
            'post_type'     => 'post',
            'comment_status'=> 'closed',
            'ping_status'   => 'closed',
        ]);

        if (is_wp_error($post_id)) {
            error_log('Gagal membuat post: ' . $title);
            continue;
        }

        $featured_image_url = trim((string)convert_gdrive_link($produk->featured_image));

        // Clone template Elementor
        $new_elementor = json_decode(json_encode($elementor_data), true);
        $tab_widget = &$new_elementor[0]['elements'][0];
        $tab_containers = &$tab_widget['elements'];
        $tabs_settings  = &$tab_widget['settings']['tabs'];

        $base_tab = end($tab_containers);
        $base_tab_setting = end($tabs_settings);

        // Bersihkan tab lama
        $tab_containers = [];
        $tabs_settings = [];

        foreach ($produk->tipe_list->tipe as $tipe) {
            $tab_copy = json_decode(json_encode($base_tab), true);
            $tab_copy['id'] = wp_generate_uuid4();

            $tab_setting = json_decode(json_encode($base_tab_setting), true);
            $nama_tipe = (string)$tipe->nama;
            $tab_setting['tab_title'] = $nama_tipe;

            $gambar = (string)convert_gdrive_link($tipe->gambar);
            $judul_pairs = [];

            if (isset($tipe->judul)) {
                foreach ($tipe->judul->children() as $k => $v) {
                    $judul_pairs[strtolower($k)] = (string)$v;
                }
            }

            // Update gambar
            foreach ($tab_copy['elements'] as &$inner_container) {
                foreach ($inner_container['elements'] as &$widget) {
                    if ($widget['widgetType'] === 'image' && !empty($gambar)) {
                        $attach_id = cip_sideload_image_get_id($gambar, $post_id);
                        if ($attach_id && !is_wp_error($attach_id)) {
                            $widget['settings']['image']['url'] = wp_get_attachment_url($attach_id);
                            $widget['settings']['image']['id']  = $attach_id;
                        } else {
                            $widget['settings']['image']['url'] = $gambar;
                        }
                    }
                }
                unset($widget);
            }
            unset($inner_container);

            // Update teks judul
            foreach ($tab_copy['elements'] as &$inner_container) {
                $has_heading = false;
                foreach ($inner_container['elements'] as $w) {
                    if ($w['widgetType'] === 'heading') {
                        $has_heading = true;
                        break;
                    }
                }
                if (!$has_heading) continue;

                $inner_container['elements'] = [];

                $i = 1;
                while (isset($judul_pairs['judul' . $i]) || isset($judul_pairs['teks' . $i])) {
                    $judul = $judul_pairs['judul' . $i] ?? '';
                    $teks  = $judul_pairs['teks' . $i] ?? '';

                    $inner_container['elements'][] = [
                        'id' => wp_generate_uuid4(),
                        'elType' => 'widget',
                        'widgetType' => 'heading',
                        'settings' => ['title' => $judul, 'header_size' => 'h3'],
                        'elements' => []
                    ];
                    $inner_container['elements'][] = [
                        'id' => wp_generate_uuid4(),
                        'elType' => 'widget',
                        'widgetType' => 'text-editor',
                        'settings' => ['editor' => '<div style="white-space: pre-line;">' . nl2br(esc_html(trim($teks))) . '</div>'],
                        'elements' => []
                    ];

                    $i++;
                }
            }
            unset($inner_container);

            $tab_containers[] = $tab_copy;
            $tabs_settings[] = $tab_setting;
        }

        // Simpan elementor data
        update_post_meta($post_id, '_elementor_data', wp_slash(json_encode($new_elementor)));
        update_post_meta($post_id, '_elementor_edit_mode', 'builder');
        update_post_meta($post_id, '_elementor_template_type', 'wp-post');
        update_post_meta($post_id, '_elementor_version', ELEMENTOR_VERSION);
        update_post_meta($post_id, '_elementor_page_settings', []);

        // Gambar unggulan
        if (!empty($featured_image_url)) {
            $attach_id = cip_sideload_image_get_id($featured_image_url, $post_id);
            if ($attach_id && !is_wp_error($attach_id)) {
                set_post_thumbnail($post_id, $attach_id);
            }
        }

        // Kategori
        $category_str = (string)$produk->kategori;
        $categories = array_filter(array_map('trim', preg_split('/[,|]+/', $category_str)));
        if (!empty($categories)) {
            $term_ids = [];
            foreach ($categories as $cat) {
                $term = term_exists($cat, 'category') ?: wp_insert_term($cat, 'category');
                if (!is_wp_error($term)) {
                    $term_id = is_array($term) ? $term['term_id'] : $term;
                    $term_ids[] = (int)$term_id;
                }
            }
            if (!empty($term_ids)) {
                wp_set_post_terms($post_id, $term_ids, 'category', false);
            }
        }

        $count++;
    }

    return ['success' => true, 'message' => "Selesai import: $count produk. Duplikat di-skip: $duplicate_count."];
}

// helper: sideload image and return attachment ID (robust)
function cip_sideload_image_get_id($file, $post_id = 0) {
    require_once(ABSPATH . 'wp-admin/includes/media.php');
    require_once(ABSPATH . 'wp-admin/includes/file.php');
    require_once(ABSPATH . 'wp-admin/includes/image.php');

    $file = convert_gdrive_link($file);

    // Coba unduh manual (karena Google Drive tidak direct serve image)
    $tmpfile = download_url($file);
    if (is_wp_error($tmpfile)) {
        // Fallback: ambil pakai file_get_contents
        $contents = @file_get_contents($file);
        if (!$contents) return false;
        $tmpfile = wp_tempnam(basename($file));
        file_put_contents($tmpfile, $contents);
    }

    $file_array = [
        'name' => basename(parse_url($file, PHP_URL_PATH)),
        'tmp_name' => $tmpfile,
    ];

    $id = media_handle_sideload($file_array, $post_id);
    if (is_wp_error($id)) {
        @unlink($tmpfile);
        return false;
    }

    return $id;
}

function cip_preview_xml($xml_path) {
    echo '<h2>Preview Isi XML</h2>';

    if (!file_exists($xml_path)) {
        echo '<div class="notice notice-error"><p>File XML tidak ditemukan di path: ' . esc_html($xml_path) . '</p></div>';
        return;
    }

    libxml_use_internal_errors(true);
    $xml = simplexml_load_file($xml_path);
    if ($xml === false) {
        echo '<div class="notice notice-error"><p>Gagal parsing XML:</p><ul>';
        foreach (libxml_get_errors() as $e) {
            echo '<li>' . esc_html($e->message) . '</li>';
        }
        echo '</ul></div>';
        return;
    }

    if (empty($xml->produk)) {
        echo '<div class="notice notice-warning"><p>Tidak ditemukan elemen <code>&lt;produk&gt;</code> di dalam file XML ini.</p></div>';
        echo '<pre>' . esc_html(substr(file_get_contents($xml_path), 0, 500)) . '</pre>';
        return;
    }

    echo '<table class="widefat striped" style="margin-top:20px;">';
    echo '<thead><tr><th>#</th><th>Nama Produk</th><th>Kategori</th><th>Featured Image</th><th>Tipe &amp; Judul/Teks</th></tr></thead><tbody>';

    $i = 1;
    $produk_nodes = $xml->xpath('//produk');
    if (!$produk_nodes) {
        echo '<tr><td colspan="5">Tidak ditemukan elemen <produk>.</td></tr>';
        echo '</tbody></table>';
        return;
    }

    foreach ($produk_nodes as $produk) {
        $nama = (string)$produk->nama;
        $kategori = (string)$produk->kategori;
        $img_raw = (string)$produk->featured_image;
        $img = convert_gdrive_link($img_raw);

        echo '<tr>';
        echo '<td>' . $i++ . '</td>';
        echo '<td><strong>' . esc_html($nama) . '</strong></td>';
        echo '<td>' . esc_html($kategori) . '</td>';

        // === Featured Image Preview + Link ===
        echo '<td>';
        if (!empty($img)) {
            echo '<a href="' . esc_url($img_raw) . '" target="_blank">';
            echo '<img src="' . esc_url($img) . '" alt="" style="width:80px;height:auto;display:block;margin-bottom:5px;">';
            echo 'Lihat Gambar';
            echo '</a>';
        } else {
            echo '-';
        }
        echo '</td>';

        // === List tipe ===
        echo '<td><ul style="margin:0;padding-left:1em;">';
        foreach ($produk->tipe_list->tipe as $tipe) {
            $tipe_nama = (string)$tipe->nama;
            $tipe_img_raw = (string)$tipe->gambar;
            $tipe_img = convert_gdrive_link($tipe_img_raw);

            echo '<li style="margin-bottom:0.5em;">';
            echo '<strong>' . esc_html($tipe_nama) . '</strong>';

            // tampilkan gambar tipe jika ada
            if (!empty($tipe_img)) {
                echo '<br><a href="' . esc_url($tipe_img_raw) . '" target="_blank">';
                echo '<img src="' . esc_url($tipe_img) . '" alt="" style="width:70px;height:auto;margin-top:4px;">';
                echo '</a>';
            }

            // tampilkan judul dan teks
            echo '<ul style="margin-top:4px;">';
            if (isset($tipe->judul)) {
                foreach ($tipe->judul->children() as $key => $val) {
                    echo '<li>' . esc_html($key) . ': ' . esc_html((string)$val) . '</li>';
                }
            } else {
                echo '<li><em>Tidak ada konten judul/teks</em></li>';
            }
            echo '</ul>';
            echo '</li>';
        }
        echo '</ul></td>';

        echo '</tr>';
    }

    echo '</tbody></table>';
}

function convert_gdrive_link($url) {
    if (strpos($url, 'drive.google.com') !== false) {
        if (preg_match('/\/d\/([a-zA-Z0-9_-]+)/', $url, $match)) {
            return 'https://drive.google.com/uc?export=download&id=' . $match[1];
        }
    }
    return $url;
}
